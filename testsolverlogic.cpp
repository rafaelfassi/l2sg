#include "testsolverlogic.h"
#include "grid.h"
#include "solverlogic.h"
#include "solverbruteforce.h"
#include <iostream>

TestSolverLogic::TestSolverLogic()
{

}

bool TestSolverLogic::execTest()
{
    // Facil ***********************************************************************
    {
        int in[9*9] =  {9,1,0,  2,0,8,  0,3,0,
                        0,0,3,  1,0,0,  0,8,5,
                        0,0,0,  0,3,4,  1,0,0,

                        0,7,2,  0,0,3,  4,9,6,
                        0,9,0,  0,0,0,  0,0,2,
                        3,5,4,  0,0,6,  7,0,8,

                        6,3,0,  0,0,0,  0,0,0,
                        0,4,5,  0,7,0,  0,0,1,
                        0,8,1,  0,0,5,  0,0,0};

        int ou[9*9] =  {9,1,7,  2,5,8,  6,3,4,
                        4,6,3,  1,9,7,  2,8,5,
                        5,2,8,  6,3,4,  1,7,9,

                        1,7,2,  5,8,3,  4,9,6,
                        8,9,6,  7,4,1,  3,5,2,
                        3,5,4,  9,2,6,  7,1,8,

                        6,3,9,  8,1,2,  5,4,7,
                        2,4,5,  3,7,9,  8,6,1,
                        7,8,1,  4,6,5,  9,2,3};

        if(!testUnit("0_0000", 0, in, ou))
            return false;
    }

    {
        int in[9*9] =  {7,4,0,  0,0,0,  0,0,0,
                        8,0,0,  0,0,0,  0,0,0,
                        0,0,0,  0,9,0,  0,1,0,

                        0,0,0,  8,0,0,  0,3,0,
                        0,0,0,  4,0,5,  0,0,0,
                        0,0,2,  0,0,0,  6,9,0,

                        0,0,9,  0,3,0,  0,0,0,
                        0,0,0,  0,0,0,  0,0,5,
                        0,0,0,  7,0,0,  0,0,8};

        int ou[9*9] =  {7,4,3,  6,8,1,  2,5,9,
                        8,9,1,  2,5,7,  4,6,3,
                        6,2,5,  3,9,4,  8,1,7,

                        4,1,7,  8,6,9,  5,3,2,
                        9,3,6,  4,2,5,  7,8,1,
                        5,8,2,  1,7,3,  6,9,4,

                        2,7,9,  5,3,8,  1,4,6,
                        1,6,8,  9,4,2,  3,7,5,
                        3,5,4,  7,1,6,  9,2,8};

        if(!testUnit("0_0001", 0, in, ou))
            return false;
    }

    {
        int in[9*9] =  {7,0,0,  3,0,0,  0,0,0,
                        0,0,0,  0,0,0,  8,2,3,
                        0,8,5,  1,4,2,  0,0,0,

                        5,9,0,  6,0,4,  0,0,8,
                        0,0,0,  0,5,0,  7,0,4,
                        0,0,4,  7,1,8,  6,0,9,

                        0,0,3,  0,0,0,  0,0,2,
                        9,0,0,  5,0,0,  4,7,0,
                        0,0,0,  0,9,0,  0,0,6};

        int ou[9*9] =  {7,2,9,  3,8,6,  1,4,5,
                        6,4,1,  9,7,5,  8,2,3,
                        3,8,5,  1,4,2,  9,6,7,

                        5,9,7,  6,3,4,  2,1,8,
                        8,1,6,  2,5,9,  7,3,4,
                        2,3,4,  7,1,8,  6,5,9,

                        4,7,3,  8,6,1,  5,9,2,
                        9,6,8,  5,2,3,  4,7,1,
                        1,5,2,  4,9,7,  3,8,6};

        if(!testUnit("0_0002", 0, in, ou))
            return false;
    }

    {
        int in[9*9] =  {7,0,0,  0,6,0,  0,0,9,
                        0,2,0,  0,0,8,  0,0,0,
                        0,3,0,  0,0,0,  0,4,0,

                        0,9,0,  0,0,0,  3,0,0,
                        0,0,8,  0,0,2,  6,0,0,
                        0,0,6,  0,5,0,  0,8,0,

                        0,7,0,  0,0,0,  0,2,0,
                        0,0,0,  2,0,0,  0,3,0,
                        9,0,0,  0,7,0,  0,0,4};

        int ou[9*9] =  {7,8,5,  3,6,4,  2,1,9,
                        6,2,4,  9,1,8,  5,7,3,
                        1,3,9,  5,2,7,  8,4,6,

                        2,9,7,  4,8,6,  3,5,1,
                        5,4,8,  1,3,2,  6,9,7,
                        3,1,6,  7,5,9,  4,8,2,

                        8,7,3,  6,4,1,  9,2,5,
                        4,6,1,  2,9,5,  7,3,8,
                        9,5,2,  8,7,3,  1,6,4};

        if(!testUnit("0_0003", 0, in, ou))
            return false;

    }


    // MÃ©dio *************************************************************************
    {
        int in[9*9] =  {6,0,0,  7,2,0,  0,0,9,
                        0,0,0,  0,4,0,  0,3,0,
                        3,0,0,  0,0,0,  0,6,7,

                        0,0,0,  0,0,0,  0,8,3,
                        0,0,0,  8,0,7,  0,0,0,
                        5,7,0,  0,0,0,  0,0,0,

                        9,5,0,  0,0,0,  0,0,1,
                        0,2,0,  0,5,0,  0,0,0,
                        4,0,0,  0,3,1,  0,0,2};

        int ou[9*9] =  {6,4,5,  7,2,3,  8,1,9,
                        8,1,7,  6,4,9,  2,3,5,
                        3,9,2,  1,8,5,  4,6,7,

                        1,6,4,  5,9,2,  7,8,3,
                        2,3,9,  8,6,7,  1,5,4,
                        5,7,8,  3,1,4,  9,2,6,

                        9,5,3,  2,7,8,  6,4,1,
                        7,2,1,  4,5,6,  3,9,8,
                        4,8,6,  9,3,1,  5,7,2};

        if(!testUnit("1_0000", 1, in, ou))
            return false;
    }

    {
        int in[9*9] =  {7,0,0,  6,0,0,  3,0,0,
                        0,6,8,  0,0,0,  0,0,9,
                        0,0,0,  5,1,0,  4,0,0,

                        0,0,2,  0,0,0,  0,9,0,
                        0,0,0,  8,4,3,  0,0,0,
                        0,3,0,  0,0,0,  7,0,0,

                        0,0,4,  0,9,5,  0,0,0,
                        9,0,0,  0,0,0,  5,2,0,
                        0,0,5,  0,0,1,  0,0,6};

        int ou[9*9] =  {7,4,1,  6,2,9,  3,8,5,
                        5,6,8,  3,7,4,  2,1,9,
                        3,2,9,  5,1,8,  4,6,7,

                        4,5,2,  1,6,7,  8,9,3,
                        1,9,7,  8,4,3,  6,5,2,
                        8,3,6,  9,5,2,  7,4,1,

                        6,7,4,  2,9,5,  1,3,8,
                        9,1,3,  7,8,6,  5,2,4,
                        2,8,5,  4,3,1,  9,7,6};

        if(!testUnit("1_0001", 1, in, ou))
            return false;
    }

    // Dificil ***********************************************************************
    {
        int in[9*9] =  {0,3,0,  9,6,1,  0,8,0,
                        1,6,0,  0,0,8,  0,2,9,
                        9,8,4,  7,0,0,  1,0,0,

                        0,2,0,  3,0,0,  0,0,0,
                        6,1,0,  8,7,5,  0,4,2,
                        0,4,0,  0,0,9,  0,7,0,

                        0,9,1,  0,8,7,  6,0,0,
                        4,7,0,  1,0,0,  0,9,8,
                        0,5,0,  0,9,0,  0,0,0};

        int ou[9*9] =  {7,3,2,  9,6,1,  4,8,5,
                        1,6,5,  4,3,8,  7,2,9,
                        9,8,4,  7,5,2,  1,6,3,

                        8,2,7,  3,4,6,  9,5,1,
                        6,1,9,  8,7,5,  3,4,2,
                        5,4,3,  2,1,9,  8,7,6,

                        2,9,1,  5,8,7,  6,3,4,
                        4,7,6,  1,2,3,  5,9,8,
                        3,5,8,  6,9,4,  2,1,7};

        if(!testUnit("2_0000", 2, in, ou))
            return false;
    }

    {
        int in[9*9] =  {3,8,0,  6,0,0,  0,0,0,
                        0,0,2,  0,0,7,  0,0,0,
                        5,9,0,  0,0,0,  0,0,0,

                        0,7,4,  0,6,0,  0,0,3,
                        0,0,3,  0,1,0,  9,0,0,
                        1,0,0,  0,9,0,  6,2,0,

                        0,0,0,  0,0,0,  0,9,5,
                        0,0,0,  8,0,0,  2,0,0,
                        0,0,0,  0,0,2,  0,7,4};

        int ou[9*9] =  {3,8,7,  6,2,9,  4,5,1,
                        4,1,2,  5,8,7,  3,6,9,
                        5,9,6,  1,4,3,  7,8,2,

                        9,7,4,  2,6,8,  5,1,3,
                        6,2,3,  7,1,5,  9,4,8,
                        1,5,8,  3,9,4,  6,2,7,

                        2,3,1,  4,7,6,  8,9,5,
                        7,4,9,  8,5,1,  2,3,6,
                        8,6,5,  9,3,2,  1,7,4};

        if(!testUnit("2_0001", 2, in, ou))
            return false;
    }


    printMsg("Test OK");
    return true;
}

bool TestSolverLogic::testUnit(const std::string &unitName, int level, int *in, int *out)
{
    printMsg(unitName, "Start testing...");

    Grid grid;
    grid.setValues(in);
    grid.fillNotes();

    SolverLogic solverLogic(grid);
    solverLogic.solve();

    if(!grid.isFull())
    {
        printMsg(unitName, "Not solved");
        return false;
    }

    if(out)
    {
        if(!grid.compareValues(out))
        {
            printMsg(unitName, "Error in solution");
            return false;
        }
    }
    else
    {
        Grid gridBf;
        gridBf.setValues(in);
        SolverBruteForce solverBruteForce(gridBf);
        std::vector<Grid> solutions = solverBruteForce.solveSolutions(2);

        if(solutions.size() != 1)
        {
            printMsg(unitName, "Is not valid");
            return false;
        }

        if(!grid.compareValues(solutions[0]))
        {
            printMsg(unitName, "Error in solution");
            return false;
        }

        printMsg(unitName, "Please, use this as the out solution");
        solutions[0].dump(0, "0", ",");
    }

    if(solverLogic.getResultLevel() != level)
    {
        printMsg(unitName, "Error in level " + std::to_string(solverLogic.getResultLevel()));
        return false;
    }

    printMsg(unitName, "Passed");
    return true;
}

void TestSolverLogic::printMsg(const std::string &msg)
{
    std::cout << std::endl;
    std::cout << "***************************************************************" << std::endl;
    std::cout << msg << std::endl;
    std::cout << "***************************************************************" << std::endl;
    std::cout << std::endl;
}

void TestSolverLogic::printMsg(const std::string &testName, const std::string &msg)
{
    std::cout << std::endl;
    std::cout << "***************************************************************" << std::endl;
    std::cout << testName << " " << msg << std::endl;
    std::cout << "***************************************************************" << std::endl;
    std::cout << std::endl;
}
